from Crypto.Util.number import long_to_bytes, bytes_to_long, inverse
from factordb.factordb import FactorDB

n=2288270088846735357106859785057471410964029178751275985133437188112869387065357149315628435760038495915707758235004078258837389024124261735560004100679591906318506257400142206172954325190681814792847192856119258140772980193363283386441962041988871891225319584672260198913596266911873284127614232167301388894238055511066261585763754427108720961
c=1830544139468069565771487497860764436100873987441160523962786369036245261225347924661906111698390411787377299141875967629752822902071765512820051031381597152255585686270283273774697157645170908977602940239539926779039419269017947546686301642000149994005631353642730555165588384942894788320123164096905642585490119321542631336729312552281480761
e=65537

'''
Question has multiple prime factors. Use FactorDB to get all prime factors of n.
Alternative solution is to use https://www.alpertron.com.ar/ECM.HTM and copy PHI
Question is similar to rsa_basics_4
'''

# Get ALL PRIME FACTORS
f = FactorDB(n) # Initialise FactorDB class module
f.connect() # Connect to API
factors = f.get_factor_list() # Get all factors from FactorDB website
print(factors)
phi = 1
for factor in factors:
    phi *= (factor - 1)

d = inverse(e, phi)
m = long_to_bytes(pow(c, d, n))
m = str(m)
print(m)