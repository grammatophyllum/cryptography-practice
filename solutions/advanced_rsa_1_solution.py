'''
We observe that e is small (11). This suggests that we can use the "cube root attack"
to find the plaintext message m using the formula m = (c + k*n)^(1/e) for some integer k.
'''

from Crypto.Util.number import long_to_bytes, inverse
import gmpy2

c=7051481754661344765310433938695827956300964658085825759584130430722085907875879315684560599363379024417472508250958057334913109732062632034101032416451053278945823072684334436802082328196417696457772558833226514664761233160778634046446553629430320801958625536011817575119904499363611987928199298784340934820553223943883532689136717605721767867726150712645241942583794490317932665774186181035832165599132266353475819746814496577781503840305046581658781947942848215675741258240613251700579583978358695626211903856185960549949608236317604958326370801831448780358510192183981799193820808845854657307501506248690777361318
n=267748531753340364611805122791140730547633726085606452673861495425487032592498569710944781720019101894955368128886355841856833862644689714366160930753134690645121446844224284031774943315938259426375265595356988107189872996784588624589743203063215598366474589633598356935464834555184988820856743858803100322019822849281385636313085171672768904529529732687668707331025770275627610759577764274773874395200015423235036656742600219106400502914983170829735478480613154119911017166110914146947451361069113695373695775903743811041911169700636301392720499558749431604768297783327106506450873159942778138047516778190631283810473203924495
e=11

# Try k integers from 1-10^6
for k in range(10**6):
    # iroot is inverse root
    m, is_correct = gmpy2.iroot(c+k*n, e)
    if is_correct:
        print(f"Found k = {k}")

        m = str(long_to_bytes(m))
        m = m.strip().replace(' ', '')
        print(f"Message: {m}")
        break # end the loop